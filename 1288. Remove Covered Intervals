1288. Remove Covered Intervals
Medium

1787

43

Add to List

Share
Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.

The interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.

Return the number of remaining intervals.

 

Example 1:

Input: intervals = [[1,4],[3,6],[2,8]]
Output: 2
Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.
Example 2:

Input: intervals = [[1,4],[2,3]]
Output: 1
 

Constraints:

1 <= intervals.length <= 1000
intervals[i].length == 2
0 <= li <= ri <= 105
All the given intervals are unique.
class Solution {
    public:
   /* bool comparator1(vector<int>& a, vector<int>& b){
    if(a[0]==b[0])
    {
        if (a[1]>b[1])
        return a[1]>b[1];
        
        return b[1]>a[1];
    }    
    return a[0]<b[0];    
    };*/
    int removeCoveredIntervals(vector<vector<int>>& intervals) {
    // sort(intervals.begin(), intervals.end(),comparator);
  //  sort(intervals.begin(),intervals.end(),comparator1); 
    sort(intervals.begin(),intervals.end(),[](const auto &s1,const auto &s2){
            return s1[0]<=s2[0];
        });    
    int n = intervals.size();
      
     vector<int> prev = intervals[0];
     int count=1;   
     for(int i=1;i<n;i++){
     count++;    
     if(intervals[i][0]>=prev[0] && intervals[i][1]<=prev[1]){
     count--;     
     }
    else     
     prev=intervals[i];    
     }  
    return count;   
    }
};
