Sheldon and Trains
Sheldon always tells people, “When you have only one day to visit Los Angeles, make it a Train Day”. He loves spending time while travelling in trains and considers it a fun activity. Sheldon’s mom has come to visit him and he decides to take her out on a train tour of the city of Pasadena, along with his friend Howard. There are n train stations in the city. Howard knows how irritating Sheldon can be during a train ride. So, to keep him busy, Howard gives Sheldon a problem so interesting that he just cannot do anything else other than devote his entire mind to solving it. The problem goes like this. At the i-th station it's possible to buy only tickets to stations from i + 1 to ai (inclusive). No tickets are sold at the last station.
Let ρi, j be the minimum number of tickets one needs to buy in order to get from stations i to station j. Sheldon’s task is to compute the sum of all values ρi, j among all pairs 1 ≤ i < j ≤ n. As brilliant as he may be, he asked for your help.
Input Format:
First line of input will contain N number of trains 
Second line will contain N-1 space-separated integers denoting the values of ai
Output Format:
Print the answer as mentioned above
Constraints:
2 < = N <= 10^5
i + 1 <=arr[i] <= N
Sample Input 1:
7
2 7 5 7 6 7 
Sample Output 1:
29
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
const int MAXN = 1 << 17;
void build(int arr[], int n, pair<int, int> segtree[])
{
    for (int i = 0; i < n; i++)
    {
        segtree[MAXN + i] = make_pair(arr[i], i);
    }
    for (int i = MAXN - 1; i > 0; i--)
    {
        segtree[i] = max(segtree[i * 2], segtree[i * 2 + 1]);
    }
}
int get(int l, int r, pair<int, int> segtree[])
{
    pair<int, int> ans{-1, -1};
    for (l += MAXN, r += MAXN + 1; l < r; l >>= 1, r >>= 1)
    {
        if (l & 1)
            ans = max(ans, segtree[l++]);
        if (r & 1)
            ans = max(ans, segtree[--r]);
    }
    return ans.second;
}
int main()
{
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n - 1; i++)
    {
        cin >> arr[i];
        arr[i] -= 1;
    }
    arr[n - 1] = n - 1;
    pair<int, int> segtree[4 * MAXN];
    build(arr, n, segtree);
    ll dp[n];
    ll ans = 0;
    dp[n - 1] = 0;
    for (int i = n - 2; i >= 0; i--)
    {
        int m = get(i + 1, arr[i], segtree);
        dp[i] = dp[m] - (arr[i] - m) + n - i - 1;
        ans += dp[i];
    }
    cout << ans << endl;
}
