421. Maximum XOR of Two Numbers in an Array
Medium

3516

300

Add to List

Share
Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.

 

Example 1:

Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.
Example 2:

Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127
class trieNode{
    
    public:
    trieNode* left;
    trieNode* right;
    
};
class Solution {
public:
    void insert(int n, trieNode* head){
    trieNode* curr= head;
    for(int i=31;i>=0;i--){
    int b = (n>>i)&1;
    if(b==0){
    if(!curr->left)    
    {
    curr->left=new trieNode();
        
    }   
    curr=curr->left;    
    }    
    else{
        if(!curr->right){
        curr->right=new trieNode();
        }
        curr=curr->right;
    }    
    }    
    }
    int findmax(trieNode* head, vector<int> &nums, int n){
    int max_xor = INT_MIN;
    for(int i=0;i<n;i++){
    int value = nums[i];
    trieNode* curr = head;
    int curr_xor=0;    
    for(int j=31;j>=0;j--)    
    {
    int b = (value>>j)&1;    
    if(b==0)    
    {
        if(curr->right)
        {
            curr_xor+=pow(2,j);
            curr=curr->right;
            
        }   
        else{
            
            curr=curr->left;
        }
    }  
    else{
        if(curr->left)
        {
            curr_xor+=pow(2,j);
            curr=curr->left;
            
            
        }
       else{
           
           curr=curr->right;
           
       } 
        
    }    
        
    }      
    if(curr_xor>max_xor){
    max_xor=curr_xor;    
        
    }    
    } 
    return max_xor;    
    }
    int findMaximumXOR(vector<int>& nums) {
      trieNode* head = new trieNode();
      int n = nums.size(); 
      for(int i=0;i<n;i++){
      insert(nums[i], head);    
          
      }  
      int gh;  
        
       gh = findmax(head,nums,n);
         
      return gh;  
    }
};
