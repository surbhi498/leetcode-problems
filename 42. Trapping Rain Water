Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105
Giving TLE
class Solution {
public:
    int trap(vector<int>& height) {
       int n = height.size();
       vector<int> left(n);
       vector<int> right(n);
       left[0]=0;
       right[n-1]=0; 
       int i; 
       for(i=1;i<n;i++){
       int max1 = INT_MIN;    
       for(int j=i-1;j>=0;j--)     
       {
         if(max1<height[j])  
         {
             max1=height[j];
             
         }  
       } 
      left[i]=max1; 
       } 
       int gh;  
       for(gh=n-2;gh>=0;gh--){
       int max1 = INT_MIN;    
       for(int j=gh+1;j<n;j++)     
       {
         if(max1<height[j])  
         {
             max1=height[j];
             
         }  
       } 
      right[gh]=max1;    
       }   
      int sum=0;
      int bn;  
     for(int i=0;i<n;i++){
     bn=(min(right[i],left[i]))-height[i];
     if(bn<0){
     bn=0;    
     }
     sum+=bn;    
     }   
     return sum;  
    }
};
