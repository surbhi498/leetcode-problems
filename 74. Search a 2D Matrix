74. Search a 2D Matrix
Medium

7064

262

Add to List

Share
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
     int n = matrix.size();
     vector<int> jk;
     for(int i=0;i<n;i++)
     {
         for(int j=0;j<matrix[i].size();j++)
         {
             
             jk.push_back(matrix[i][j]);
             
         }    
         
     } 
        
     if(binary_search(jk.begin(),jk.end(),target))
     return true;
     else
     return false;
    }
};
