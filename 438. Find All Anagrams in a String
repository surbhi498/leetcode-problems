Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> result;
        if(s.length()==0 || s.length()<p.length()) return result;
        vector<int> b(26,0);
        for(int i=0;i<p.length();i++){
        b[p[i]-'a']++;    
        }
        int left=0;
        int right =0;
        int count = p.length();
        while(right<s.length()){
        if(b[s[right++]-'a']-->=1) count--;
        if(count==0) result.push_back(left);
        if((right-left)==p.length() && b[s[left++]-'a']++ >=0) count++;    
        }
      return  result;
    }
};
