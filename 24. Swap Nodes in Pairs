24. Swap Nodes in Pairs
Medium

6066

275

Add to List

Share
Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

 

Example 1:


Input: head = [1,2,3,4]
Output: [2,1,4,3]
Example 2:

Input: head = []
Output: []
Example 3:

Input: head = [1]
Output: [1]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
   /*  ListNode* prev;
     prev = head;    
//     ListNode* temp = head->next;
   //  head=temp;  
     ListNode* curr= head->next;
     head=curr;   
     if(prev != NULL && curr != NULL){   
     while(prev != NULL && prev->next != NULL && curr != NULL){
     prev->next = curr->next; 
     curr->next=prev;
     prev = prev->next;
     if(prev != NULL)    
     curr=prev->next;  
     else
      curr= NULL;   
     }
   //  curr->next=NULL; 
     }    
     return head;*/
     ListNode* temp=head;
     while(temp != NULL && temp->next != NULL){
     swap(temp->val, temp->next->val);
     temp = temp->next->next;    
     } 
     return head;   
    }
};
