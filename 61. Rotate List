Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 // giving tle
class Solution {
public:
    ListNode* helper1(ListNode* head, int k){
    ListNode* temp=head;
    ListNode* prev=NULL;   
    while(temp->next != NULL)
    {
    prev=temp; 
    temp=temp->next;   
    } 
    if(prev==NULL){
    return temp;    
    }    
    prev->next=NULL;
    temp->next=head;
    head=temp;
    return head;    
    }
    ListNode* rotateRight(ListNode* head, int k) {
      ListNode* curr=head;
        if(curr==NULL){
        return curr;    
        }
        for(int i=0;i<k;i++){
         curr = helper1(curr,k); 
      } 
        return curr;
    }
};
