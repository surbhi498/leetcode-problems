2. Add Two Numbers
Medium

17225

3593

Add to List

Share
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head1=l1;
        ListNode* head2= l2;
        ListNode* head3=NULL;
        ListNode* prev= NULL;
         int c=0;
        while(head1 && head2){
        int val1 = head1->val;
        int val2 = head2->val;
        int sum = c+  val1 + val2;
       
         
        if(sum<10){
         ListNode* l3 = new ListNode(sum);     
        if(prev==NULL){
        head3=l3;
        prev=head3;    
        } 
        else{
        prev->next=l3;
        prev=prev->next;    
        }
            c=0;
        }
        else if(sum>=10) {
        int fg = sum%10;
        int yu = sum/10;  
        ListNode* l3 = new ListNode(fg);   
        c=yu;
        if(prev==NULL){
        head3=l3;
        prev=head3;    
        } 
        else{
        prev->next=l3;
        prev=prev->next;    
        }    
        } 
        head1=head1->next;
        head2= head2->next;    
        } 
        if(head1){
        while(head1){
        int cv = c+ head1->val;
        int xc = cv%10;
        c = cv/10;    
        ListNode* l3 = new ListNode(xc);  
        prev->next=l3;
        prev=prev->next;
        head1=head1->next;    
        } 
           
        
        }
        if(head2){
        while(head2){
        int cv = c+ head2->val;
        int xc = cv%10;
         c = cv/10;    
        ListNode* l3 = new ListNode(xc);  
        prev->next=l3;
        prev=prev->next;
        head2=head2->next;    
        } 
         
           
        }
        if(c){
        ListNode* l3 = new ListNode(c);
        prev->next=l3;
        l3->next=NULL;    
        }    
        return head3;    
    }
};
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
