1249. Minimum Remove to Make Valid Parentheses
Medium

4471

74

Add to List

Share
Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
 

Constraints:

1 <= s.length <= 105
s[i] is either'(' , ')', or lowercase English letter.
class Solution {
public:
    string minRemoveToMakeValid(string s) {
        vector<int> invalidleft;
        vector<int> invalidright;
        int n = s.length();
        for(int i=0;i<n;i++)
        {
            if(s[i]=='(')
            {
                
                invalidleft.push_back(i);
            }    
            else if(s[i]==')'){
                
                if(invalidleft.empty()){
                    
                    invalidright.push_back(i);
                }
                else{
                    
                    invalidleft.pop_back();
                }
                
            }
            
            
        } 
        for(int i=0;i<invalidleft.size();i++){
            s[invalidleft[i]]='X';
        }
         for(int i=0;i<invalidright.size();i++){
            s[invalidright[i]]='X';
        }
        s.erase(remove(s.begin(),s.end(),'X'), s.end());
       return s; 
    }
};
