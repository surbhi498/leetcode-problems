20. Valid Parentheses
Easy

12006

518

Add to List

Share
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
#include <iostream>
#include <stack>
using namespace std;
class Solution {
public:
    bool isValid(string s) {
        int n= s.length();
        stack<char> gh;
        for(int i=0;i<n;i++){
        if(s[i]=='(' ||  s[i]=='[' || s[i]=='{')  
        gh.push(s[i]); 
        else if(s[i]==')'|| s[i]==']'||s[i]=='}')
        { 
        if(gh.empty()) return false;
        char top1 = gh.top();
        if(s[i]==')' && top1=='(' || s[i]==']' && top1=='[' || s[i]=='}' && top1=='{') 
        gh.pop();
        else
        return false;    
        }    
        }
        if(gh.empty()){
        return true;    
        }
        return false;
      
        
        
    }
};
